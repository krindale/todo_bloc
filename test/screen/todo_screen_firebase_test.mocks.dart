// Mocks generated by Mockito 5.4.5 from annotations
// in todo_bloc/test/screen/todo_screen_firebase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:todo_bloc/model/saved_link.dart' as _i5;
import 'package:todo_bloc/model/todo_item.dart' as _i2;
import 'package:todo_bloc/services/firebase_sync_service.dart' as _i3;
import 'package:todo_bloc/services/task_categorization_service.dart' as _i6;
import 'package:todo_bloc/services/todo_repository.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoItem_0 extends _i1.SmartFake implements _i2.TodoItem {
  _FakeTodoItem_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseSyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseSyncService extends _i1.Mock
    implements _i3.FirebaseSyncService {
  MockFirebaseSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isUserSignedIn => (super.noSuchMethod(
        Invocation.getter(#isUserSignedIn),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> syncTodosToFirestore() => (super.noSuchMethod(
        Invocation.method(
          #syncTodosToFirestore,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncTodosFromFirestore() => (super.noSuchMethod(
        Invocation.method(
          #syncTodosFromFirestore,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncLinksToFirestore() => (super.noSuchMethod(
        Invocation.method(
          #syncLinksToFirestore,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncLinksFromFirestore() => (super.noSuchMethod(
        Invocation.method(
          #syncLinksFromFirestore,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> uploadAllDataToFirestore() => (super.noSuchMethod(
        Invocation.method(
          #uploadAllDataToFirestore,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> downloadAllDataFromFirestore() => (super.noSuchMethod(
        Invocation.method(
          #downloadAllDataFromFirestore,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.TodoItem>> todosStream() => (super.noSuchMethod(
        Invocation.method(
          #todosStream,
          [],
        ),
        returnValue: _i4.Stream<List<_i2.TodoItem>>.empty(),
      ) as _i4.Stream<List<_i2.TodoItem>>);

  @override
  _i4.Stream<List<_i5.SavedLink>> savedLinksStream() => (super.noSuchMethod(
        Invocation.method(
          #savedLinksStream,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.SavedLink>>.empty(),
      ) as _i4.Stream<List<_i5.SavedLink>>);

  @override
  _i4.Future<void> removeDuplicateTodos() => (super.noSuchMethod(
        Invocation.method(
          #removeDuplicateTodos,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> addTodoToFirestore(_i2.TodoItem? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodoToFirestore,
          [todo],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> updateTodoInFirestore(_i2.TodoItem? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodoInFirestore,
          [todo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTodoFromFirestore(String? docId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodoFromFirestore,
          [docId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeDuplicateSavedLinks() => (super.noSuchMethod(
        Invocation.method(
          #removeDuplicateSavedLinks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> addLinkToFirestore(_i5.SavedLink? link) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLinkToFirestore,
          [link],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> updateLinkInFirestore(_i5.SavedLink? link) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLinkInFirestore,
          [link],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteLinkFromFirestore(String? docId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteLinkFromFirestore,
          [docId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cleanupDuplicateData() => (super.noSuchMethod(
        Invocation.method(
          #cleanupDuplicateData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [TaskCategorizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskCategorizationService extends _i1.Mock
    implements _i6.TaskCategorizationService {
  MockTaskCategorizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String categorizeTask(String? title) => (super.noSuchMethod(
        Invocation.method(
          #categorizeTask,
          [title],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #categorizeTask,
            [title],
          ),
        ),
      ) as String);

  @override
  _i2.TodoItem categorizeAndUpdateTask(_i2.TodoItem? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #categorizeAndUpdateTask,
          [task],
        ),
        returnValue: _FakeTodoItem_0(
          this,
          Invocation.method(
            #categorizeAndUpdateTask,
            [task],
          ),
        ),
      ) as _i2.TodoItem);

  @override
  Map<String, List<_i2.TodoItem>> groupTasksByCategory(
          List<_i2.TodoItem>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #groupTasksByCategory,
          [tasks],
        ),
        returnValue: <String, List<_i2.TodoItem>>{},
      ) as Map<String, List<_i2.TodoItem>>);

  @override
  Map<String, int> getCategoryTaskCounts(List<_i2.TodoItem>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryTaskCounts,
          [tasks],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  Map<String, int> getCategoryCompletionCounts(List<_i2.TodoItem>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryCompletionCounts,
          [tasks],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i8.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> updateTodoByIndex(
    int? index,
    _i2.TodoItem? updatedTodo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodoByIndex,
          [
            index,
            updatedTodo,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTodoByIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodoByIndex,
          [index],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.TodoItem>> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i4.Future<List<_i2.TodoItem>>.value(<_i2.TodoItem>[]),
      ) as _i4.Future<List<_i2.TodoItem>>);

  @override
  _i4.Future<void> addTodo(_i2.TodoItem? todo) => (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTodo(_i2.TodoItem? todo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTodo(_i2.TodoItem? todo) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todo],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
