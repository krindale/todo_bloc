// Mocks generated by Mockito 5.4.5 from annotations
// in todo_bloc/test/services/system_tray_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i2;

import 'package:flutter/material.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:system_tray/src/menu.dart' as _i6;
import 'package:system_tray/src/menu_item.dart' as _i7;
import 'package:system_tray/src/tray.dart' as _i3;
import 'package:window_manager/src/resize_edge.dart' as _i13;
import 'package:window_manager/src/title_bar_style.dart' as _i12;
import 'package:window_manager/src/window_listener.dart' as _i9;
import 'package:window_manager/src/window_manager.dart' as _i8;
import 'package:window_manager/src/window_options.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRect_0 extends _i1.SmartFake implements _i2.Rect {
  _FakeRect_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSize_1 extends _i1.SmartFake implements _i2.Size {
  _FakeSize_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOffset_2 extends _i1.SmartFake implements _i2.Offset {
  _FakeOffset_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SystemTray].
///
/// See the documentation for Mockito's code generation for more information.
class MockSystemTray extends _i1.Mock implements _i3.SystemTray {
  MockSystemTray() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> initSystemTray({
    required String? iconPath,
    String? title,
    String? toolTip,
    bool? isTemplate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initSystemTray,
          [],
          {
            #iconPath: iconPath,
            #title: title,
            #toolTip: toolTip,
            #isTemplate: isTemplate,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setSystemTrayInfo({
    String? title,
    String? iconPath,
    String? toolTip,
    bool? isTemplate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSystemTrayInfo,
          [],
          {
            #title: title,
            #iconPath: iconPath,
            #toolTip: toolTip,
            #isTemplate: isTemplate,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setImage(
    String? image, {
    bool? isTemplate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setImage,
          [image],
          {#isTemplate: isTemplate},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setToolTip(String? toolTip) => (super.noSuchMethod(
        Invocation.method(
          #setToolTip,
          [toolTip],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setTitle(String? title) => (super.noSuchMethod(
        Invocation.method(
          #setTitle,
          [title],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String> getTitle() => (super.noSuchMethod(
        Invocation.method(
          #getTitle,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getTitle,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> setContextMenu(_i6.Menu? menu) => (super.noSuchMethod(
        Invocation.method(
          #setContextMenu,
          [menu],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> popUpContextMenu() => (super.noSuchMethod(
        Invocation.method(
          #popUpContextMenu,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void registerSystemTrayEventHandler(_i3.SystemTrayEventCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #registerSystemTrayEventHandler,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> destroy() => (super.noSuchMethod(
        Invocation.method(
          #destroy,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Menu].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenu extends _i1.Mock implements _i6.Menu {
  MockMenu() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get menuId => (super.noSuchMethod(
        Invocation.getter(#menuId),
        returnValue: 0,
      ) as int);

  @override
  int get nextMenuItemId => (super.noSuchMethod(
        Invocation.getter(#nextMenuItemId),
        returnValue: 0,
      ) as int);

  @override
  _i4.Future<bool> buildFrom(List<_i7.MenuItemBase>? menus) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildFrom,
          [menus],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  T? findItemByName<T>(String? name) => (super.noSuchMethod(Invocation.method(
        #findItemByName,
        [name],
      )) as T?);
}

/// A class which mocks [WindowManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWindowManager extends _i1.Mock implements _i8.WindowManager {
  MockWindowManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.WindowListener> get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: <_i9.WindowListener>[],
      ) as List<_i9.WindowListener>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i9.WindowListener? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.WindowListener? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  double getDevicePixelRatio() => (super.noSuchMethod(
        Invocation.method(
          #getDevicePixelRatio,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i4.Future<void> ensureInitialized() => (super.noSuchMethod(
        Invocation.method(
          #ensureInitialized,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAsFrameless() => (super.noSuchMethod(
        Invocation.method(
          #setAsFrameless,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> waitUntilReadyToShow([
    _i10.WindowOptions? options,
    _i2.VoidCallback? callback,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #waitUntilReadyToShow,
          [
            options,
            callback,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> destroy() => (super.noSuchMethod(
        Invocation.method(
          #destroy,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isPreventClose() => (super.noSuchMethod(
        Invocation.method(
          #isPreventClose,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setPreventClose(bool? isPreventClose) => (super.noSuchMethod(
        Invocation.method(
          #setPreventClose,
          [isPreventClose],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> focus() => (super.noSuchMethod(
        Invocation.method(
          #focus,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> blur() => (super.noSuchMethod(
        Invocation.method(
          #blur,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isFocused() => (super.noSuchMethod(
        Invocation.method(
          #isFocused,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> show({bool? inactive = false}) => (super.noSuchMethod(
        Invocation.method(
          #show,
          [],
          {#inactive: inactive},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> hide() => (super.noSuchMethod(
        Invocation.method(
          #hide,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isVisible() => (super.noSuchMethod(
        Invocation.method(
          #isVisible,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isMaximized() => (super.noSuchMethod(
        Invocation.method(
          #isMaximized,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> maximize({bool? vertically = false}) => (super.noSuchMethod(
        Invocation.method(
          #maximize,
          [],
          {#vertically: vertically},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unmaximize() => (super.noSuchMethod(
        Invocation.method(
          #unmaximize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isMinimized() => (super.noSuchMethod(
        Invocation.method(
          #isMinimized,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> minimize() => (super.noSuchMethod(
        Invocation.method(
          #minimize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> restore() => (super.noSuchMethod(
        Invocation.method(
          #restore,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isFullScreen() => (super.noSuchMethod(
        Invocation.method(
          #isFullScreen,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setFullScreen(bool? isFullScreen) => (super.noSuchMethod(
        Invocation.method(
          #setFullScreen,
          [isFullScreen],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isDockable() => (super.noSuchMethod(
        Invocation.method(
          #isDockable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i8.DockSide?> isDocked() => (super.noSuchMethod(
        Invocation.method(
          #isDocked,
          [],
        ),
        returnValue: _i4.Future<_i8.DockSide?>.value(),
      ) as _i4.Future<_i8.DockSide?>);

  @override
  _i4.Future<void> dock({
    required _i8.DockSide? side,
    required int? width,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dock,
          [],
          {
            #side: side,
            #width: width,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> undock() => (super.noSuchMethod(
        Invocation.method(
          #undock,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setAspectRatio(double? aspectRatio) => (super.noSuchMethod(
        Invocation.method(
          #setAspectRatio,
          [aspectRatio],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setBackgroundColor(_i2.Color? backgroundColor) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBackgroundColor,
          [backgroundColor],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAlignment(
    _i11.Alignment? alignment, {
    bool? animate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAlignment,
          [alignment],
          {#animate: animate},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> center({bool? animate = false}) => (super.noSuchMethod(
        Invocation.method(
          #center,
          [],
          {#animate: animate},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Rect> getBounds() => (super.noSuchMethod(
        Invocation.method(
          #getBounds,
          [],
        ),
        returnValue: _i4.Future<_i2.Rect>.value(_FakeRect_0(
          this,
          Invocation.method(
            #getBounds,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Rect>);

  @override
  _i4.Future<void> setBounds(
    _i2.Rect? bounds, {
    _i2.Offset? position,
    _i2.Size? size,
    bool? animate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBounds,
          [bounds],
          {
            #position: position,
            #size: size,
            #animate: animate,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Size> getSize() => (super.noSuchMethod(
        Invocation.method(
          #getSize,
          [],
        ),
        returnValue: _i4.Future<_i2.Size>.value(_FakeSize_1(
          this,
          Invocation.method(
            #getSize,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Size>);

  @override
  _i4.Future<void> setSize(
    _i2.Size? size, {
    bool? animate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSize,
          [size],
          {#animate: animate},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Offset> getPosition() => (super.noSuchMethod(
        Invocation.method(
          #getPosition,
          [],
        ),
        returnValue: _i4.Future<_i2.Offset>.value(_FakeOffset_2(
          this,
          Invocation.method(
            #getPosition,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Offset>);

  @override
  _i4.Future<void> setPosition(
    _i2.Offset? position, {
    bool? animate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPosition,
          [position],
          {#animate: animate},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setMinimumSize(_i2.Size? size) => (super.noSuchMethod(
        Invocation.method(
          #setMinimumSize,
          [size],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setMaximumSize(_i2.Size? size) => (super.noSuchMethod(
        Invocation.method(
          #setMaximumSize,
          [size],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isResizable() => (super.noSuchMethod(
        Invocation.method(
          #isResizable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setResizable(bool? isResizable) => (super.noSuchMethod(
        Invocation.method(
          #setResizable,
          [isResizable],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isMovable() => (super.noSuchMethod(
        Invocation.method(
          #isMovable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setMovable(bool? isMovable) => (super.noSuchMethod(
        Invocation.method(
          #setMovable,
          [isMovable],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isMinimizable() => (super.noSuchMethod(
        Invocation.method(
          #isMinimizable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setMinimizable(bool? isMinimizable) => (super.noSuchMethod(
        Invocation.method(
          #setMinimizable,
          [isMinimizable],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isClosable() => (super.noSuchMethod(
        Invocation.method(
          #isClosable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isMaximizable() => (super.noSuchMethod(
        Invocation.method(
          #isMaximizable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setMaximizable(bool? isMaximizable) => (super.noSuchMethod(
        Invocation.method(
          #setMaximizable,
          [isMaximizable],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setClosable(bool? isClosable) => (super.noSuchMethod(
        Invocation.method(
          #setClosable,
          [isClosable],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isAlwaysOnTop() => (super.noSuchMethod(
        Invocation.method(
          #isAlwaysOnTop,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setAlwaysOnTop(bool? isAlwaysOnTop) => (super.noSuchMethod(
        Invocation.method(
          #setAlwaysOnTop,
          [isAlwaysOnTop],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isAlwaysOnBottom() => (super.noSuchMethod(
        Invocation.method(
          #isAlwaysOnBottom,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setAlwaysOnBottom(bool? isAlwaysOnBottom) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAlwaysOnBottom,
          [isAlwaysOnBottom],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String> getTitle() => (super.noSuchMethod(
        Invocation.method(
          #getTitle,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getTitle,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> setTitle(String? title) => (super.noSuchMethod(
        Invocation.method(
          #setTitle,
          [title],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setTitleBarStyle(
    _i12.TitleBarStyle? titleBarStyle, {
    bool? windowButtonVisibility = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setTitleBarStyle,
          [titleBarStyle],
          {#windowButtonVisibility: windowButtonVisibility},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> getTitleBarHeight() => (super.noSuchMethod(
        Invocation.method(
          #getTitleBarHeight,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> isSkipTaskbar() => (super.noSuchMethod(
        Invocation.method(
          #isSkipTaskbar,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setSkipTaskbar(bool? isSkipTaskbar) => (super.noSuchMethod(
        Invocation.method(
          #setSkipTaskbar,
          [isSkipTaskbar],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setProgressBar(double? progress) => (super.noSuchMethod(
        Invocation.method(
          #setProgressBar,
          [progress],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setIcon(String? iconPath) => (super.noSuchMethod(
        Invocation.method(
          #setIcon,
          [iconPath],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isVisibleOnAllWorkspaces() => (super.noSuchMethod(
        Invocation.method(
          #isVisibleOnAllWorkspaces,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setVisibleOnAllWorkspaces(
    bool? visible, {
    bool? visibleOnFullScreen,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setVisibleOnAllWorkspaces,
          [visible],
          {#visibleOnFullScreen: visibleOnFullScreen},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setBadgeLabel([String? label]) => (super.noSuchMethod(
        Invocation.method(
          #setBadgeLabel,
          [label],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasShadow() => (super.noSuchMethod(
        Invocation.method(
          #hasShadow,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setHasShadow(bool? hasShadow) => (super.noSuchMethod(
        Invocation.method(
          #setHasShadow,
          [hasShadow],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<double> getOpacity() => (super.noSuchMethod(
        Invocation.method(
          #getOpacity,
          [],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<void> setOpacity(double? opacity) => (super.noSuchMethod(
        Invocation.method(
          #setOpacity,
          [opacity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setBrightness(_i2.Brightness? brightness) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBrightness,
          [brightness],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setIgnoreMouseEvents(
    bool? ignore, {
    bool? forward = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIgnoreMouseEvents,
          [ignore],
          {#forward: forward},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> popUpWindowMenu() => (super.noSuchMethod(
        Invocation.method(
          #popUpWindowMenu,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startDragging() => (super.noSuchMethod(
        Invocation.method(
          #startDragging,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> startResizing(_i13.ResizeEdge? resizeEdge) =>
      (super.noSuchMethod(
        Invocation.method(
          #startResizing,
          [resizeEdge],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> grabKeyboard() => (super.noSuchMethod(
        Invocation.method(
          #grabKeyboard,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> ungrabKeyboard() => (super.noSuchMethod(
        Invocation.method(
          #ungrabKeyboard,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
